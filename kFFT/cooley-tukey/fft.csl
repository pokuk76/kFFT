const math = @import_module("<math>");

const items: [*]*f32 = undefined;

fn log4(N: i16) i16 {
    var temp = math.log_f16(N) / math.log_f16(4.0);
    return @as(i16, temp);
}


fn mul_complex(cr: f32, ci: f32, a: f32, b: f32, idx: i16, s: i16) {
    var ar: f32, ai: f32, br: f32, bi: f32;
    
    ar = a[2*s*idx];
    ai = a[2*s*idx+1];

    br = b[2*idx];
    bi = b[2*idx+1];

    cr[2*idx] = ar*br - ai*bi;
    cr[2*idx+1] = ar*bi + ai*br;
}


fn FFT4_based(Y[*]:f32, X[*]:f32, s:i16) {
    // TODO: ...?
    t0 = X0 + X4;
    t1 = X2 + X6;
    t2 = X1 + X5;
    t3 = X3 + X7;
    t4 = X0 - X4;
    t5 = X2 - X6;
    t6 = X1 - X5;
    t7 = X3 - X7;

    Y[0] = t0 + t1;
    Y[1] = t2 + t3;
    Y[4] = t0 - t1;
    Y[5] = t2 - t3;
    Y[2 = t4 - t5;
    Y[3] = t6 + t7;
    Y[6] = t4 + t5;
    Y[7] = t6 - t7;
}


fn FFT4_twiddle(Y[*]:f32, s:i16, n:i16, j:i16) {
    var t0:f32; var t1:f32; var t2:f32; var t3:f32; var t4:f32; var t5:f32; var t6:f32; var t7:f32;
    var X0:f32; var X1:f32; var X2:f32; var X3:f32; var X4:f32; var X5:f32; var X6:f32; var X7:f32;

    var [*]Dj;

    // Dj = &DN[n-2] + 8*j;
    Dj = DN[n-2] + 8*j;  // I don't think we'd want to dereference DN?
    mul_complex(X0, X1, Y, Dj, 0, s);
    mul_complex(X2, X3, Y, Dj, 1, s);
    mul_complex(X4, X5, Y, Dj, 2, s);
    mul_complex(X6, X7, Y, Dj, 3, s);

    t0 = X0 + X4;
    t1 = X2 + X6;
    t2 = X1 + X5;
    t3 = X3 + X7;
    t4 = X0 - X4;
    t5 = X2 - X6;
    t6 = X1 - X5;
    t7 = X3 - X7;

    Y[0] = t0 + t1;
    Y[1] = t2 + t3;
    Y[4*s] = t0 - t1;
    Y[4*s+1] = t2 - t3;
    Y[2*s] = t4 - t5;
    Y[2*s+1] = t6 + t7;
    Y[6*s] = t4 + t5;
    Y[6*s+1] = t6 - t7;
}


fn FFT_recurse(N: i16, n: i16, Y, X, s: i16) {
    var j: i16 = 0;

    if (N == 4) {
        // @comptime_print(1.0);

        l = add_complex(x0, mul_complex(w_0_2, x2));
        r = add_complex(x1, mul_complex(w_0_2, x3));
        result = add_complex(
            l,
            mul_complex(w_0_4, r)
        );
        
    } else {
        while (j < 4) : (j += 1) {
            FFT_recurse(N/4, n-1, Y+(2*(N/4)*j), X, 4*s);
        }
        j = 0;
        while (j < N/4) : (j += 1) {
            FFT4_twiddle(Y+(2*j), N/4, n, j);
        }
    }
}


fn FFT(N: i16, Y[*]: f32, X[*]: f32) {
    FFT_recurse(N, log4(N), Y, X, 1);
}