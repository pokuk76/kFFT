@const math = @import_module("<math>");

// TODO: Is there a way to pass a type as a param?
param precision:i16;


const complex = struct {
  real_part: f32,
  imag_part: f32
};


fn add_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part + y.real_part,
        .imag_part = x.imag_part + y.imag_part
    };
}

fn sub_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part - y.real_part,
        .imag_part = x.imag_part - y.imag_part
    };
}

fn mul_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part * y.real_part - x.imag_part * y.imag_part,
        .imag_part = x.real_part * y.imag_part + x.imag_part * y.real_part
    };

}

fn mul_complex_scalar(x: complex, y: f32) complex {
    return complex {
        .real_part = x.real_part * y,
        .imag_part = x.imag_part * y
    };

}

fn mul_complex(cr: f32, ci: f32, a: f32, b: f32, idx: i16, s: i16) {
    var ar: f32, ai: f32, br: f32, bi: f32;
    
    ar = a[2*s*idx];
    ai = a[2*s*idx+1];

    br = b[2*idx];
    bi = b[2*idx+1];

    cr[2*idx] = ar*br - ai*bi;
    cr[2*idx+1] = ar*bi + ai*br;
}