const layout_module = @import_module("<layout>");

const timestamp = @import_module("<time>");
var tsc_end_buf = @zeros([timestamp.tsc_size_words]u16);
var tsc_start_buf = @zeros([timestamp.tsc_size_words]u16);

var timer_buf = @zeros([3]f32);
var ptr_timer_buf: [*]f32 = &timer_buf;


param memcpy_params: comptime_struct;
param c2d_params: comptime_struct;


// Pick two task IDs not used in the library for callbacks
const x_task_id = @get_local_task_id(15);
const y_task_id = @get_local_task_id(16);

param LAUNCH: color;  // a routable color for RPC
// Task IDs
// param EXIT:                     local_task_id; // entrypoint to leave RPC

const sys_mod = @import_module("<memcpy_multi/memcpy>", @concat_structs(memcpy_params, .{
     .LAUNCH = LAUNCH
    }));

// <https://sdk.cerebras.net/csl/code-examples/benchmark-gemv-collectives>
// Currently only using collectives to get pe_id
const mpi_x = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.x });
// const mpi_y = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.y });

var y: [2*4]f32;
// var x: [4]f32;

// TODO: Hardcoding some values for now
const complex = struct {
  real_part: f32,
  imag_part: f32
};

//var x = [4]complex {
//    complex { .real_part = 1.0, .imag_part = 0.0 },
//    complex { .real_part = 2.0, .imag_part = 0.0 },
//    complex { .real_part = 3.0, .imag_part = 0.0 },
//    complex { .real_part = 4.0, .imag_part = 0.0 }
//};

// TODO: Arrays are a nightmare with the current SDK (or I'm just not understanding it well enough yet)
var x0 = complex { .real_part = 1.0, .imag_part = 0.0 };
var x1 = complex { .real_part = 2.0, .imag_part = 0.0 };
var x2 = complex { .real_part = 3.0, .imag_part = 0.0 };
var x3 = complex { .real_part = 4.0, .imag_part = 0.0 };
// Twiddle factors
const w_0_2 = complex { .real_part = 1.0, .imag_part = 0.0 };
const w_0_4 = complex { .real_part = 1.0, .imag_part = 0.0 };
const w_1_4 = complex { .real_part = 0.0, .imag_part = -1.0 };

fn add_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part + y.real_part,
        .imag_part = x.imag_part + y.imag_part
    };
}

fn sub_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part - y.real_part,
        .imag_part = x.imag_part - y.imag_part
    };
}

fn mul_complex(x: complex, y: complex) complex {
    return complex {
        .real_part = x.real_part * y.real_part - x.imag_part * y.imag_part,
        .imag_part = x.real_part * y.imag_part + x.imag_part * y.real_part
    };

}


const x_ptr: [*]complex = &x;  // TODO: Does this need to be const?
const y_ptr: [*]f32 = &y;


task fft_4point() void {

    const pe_x = mpi_x.pe_id;
    // const pe_x = layout_module.get_x_coord();
    // const pe_x = 1;
    // @comptime_print(pe_x);

    var l: complex;
    var r: complex;
    var result: complex;

    // TODO: We can set up inputs to the equations (i.e. input vector and twiddle factors) in a way that allows us to get rid of the if statements
    if (pe_x == 0) {
        // @comptime_print(1.0);

        l = add_complex(x0, mul_complex(w_0_2, x2));
        r = add_complex(x1, mul_complex(w_0_2, x3));
        result = add_complex(
            l,
            mul_complex(w_0_4, r)
        );
        
    } else if (pe_x == 1) {
        l = sub_complex(x0, mul_complex(w_0_2, x2));
        r = sub_complex(x1, mul_complex(w_0_2, x3));
        result = add_complex(
            l,
            mul_complex(w_1_4, r)
        );

    } else if (pe_x == 2) {
        l = add_complex(x0, mul_complex(w_0_2, x2));
        r = add_complex(x1, mul_complex(w_0_2, x3));
        result = sub_complex(
            l,
            mul_complex(w_0_4, r)
        );

    } else if (pe_x == 3) {
        l = sub_complex(x0, mul_complex(w_0_2, x2));
        r = sub_complex(x1, mul_complex(w_0_2, x3));
        result = sub_complex(
            l,
            mul_complex(w_1_4, r)
        );

    } else {
        // "Error handling" TODO: Better error handling?
        y_ptr[0] = -1.0;
        y_ptr[1] = -1.0;
        y_ptr[2] = -1.0;
        y_ptr[3] = -1.0;

        return;
    }
    y_ptr[2*pe_x] = result.real_part;
    y_ptr[2*pe_x+1] = result.imag_part;
}

task f_exit() void {
    // the user must unblock cmd color for every PE
    // memcpy's cmd_stream must be unblocked on all PEs for further memcpy commands to execute
    sys_mod.unblock_cmd_stream();
}

fn main() void {
    mpi_x.init();
    // mpi_y.init();

    timestamp.enable_tsc();
    timestamp.get_timestamp(&tsc_start_buf);

    // Actual FFT computation
    fft_4point();

    timestamp.get_timestamp(&tsc_end_buf);
    timestamp.disable_tsc();

    var lo_: u16 = 0;
    var hi_: u16 = 0;
    var word: u32 = 0;

    lo_ = tsc_start_buf[0];
    hi_ = tsc_start_buf[1];
    timer_buf[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_start_buf[2];
    hi_ = tsc_end_buf[0];
    timer_buf[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_end_buf[1];
    hi_ = tsc_end_buf[2];
    timer_buf[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    sys_mod.unblock_cmd_stream();
    // @activate(EXIT);
}


comptime {
    // @bind_local_task(f_exit, EXIT);

    // Export symbol pointing to y so it is host-readable
    @export_symbol(y_ptr, "y");
    // @export_symbol(x_ptr, "x"); 


    // Export host-callable device function / // Export function so it is host-callable by RPC mechanism
    // TODO: Find out why we need to do these exports here and in the layout file
    @export_symbol(main);

    //@rpc(@get_data_task_id(sys_mod.LAUNCH));
    @rpc(sys_mod.LAUNCH);
}