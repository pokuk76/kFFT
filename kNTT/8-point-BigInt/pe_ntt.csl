const layout_module = @import_module("<layout>");

const timestamp = @import_module("<time>");
var tsc_end_buf = @zeros([timestamp.tsc_size_words]u16);
var tsc_start_buf = @zeros([timestamp.tsc_size_words]u16);

var timer_buf = @zeros([3]f32);
var ptr_timer_buf: [*]f32 = &timer_buf;


param memcpy_params: comptime_struct;
param c2d_params: comptime_struct;


// Pick two task IDs not used in the library for callbacks
const x_task_id = @get_local_task_id(15);
const y_task_id = @get_local_task_id(16);

param LAUNCH: color;  // a routable color for RPC
// Task IDs
// param EXIT:                     local_task_id; // entrypoint to leave RPC

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// <https://sdk.cerebras.net/csl/code-examples/benchmark-gemv-collectives>
// Currently only using collectives to get pe_id
const mpi_x = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.x });
// const mpi_y = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.y });

var y: [16]u32;
var y64: u64;
// TODO [poku]: Hardcoding some values for now
var x = [8]u64 {66180002, 46054340, 185133904, 68728779, 156137740, 135212474, 87317267, 204961903};
// x[0] = 66180002; x[1] = 46054340; x[2] = 185133904; x[3] = 68728779; 
// x[4] = 156137740; x[5] = 135212474; x[6] = 87317267; x[7] = 204961903;

var twd = [8]u64 {1, 106416730, 210605896, 90281519, 18125476, 56427457, 86117821, 123453994};
// twd[0] = 1; twd[1] = 106416730; twd[2] = 210605896; twd[3] = 90281519;
// twd[4] = 18125476; twd[5] = 56427457; twd[6] = 86117821; twd[7] = 123453994;

const modulus: u64 = 268435361;


fn ModMulBigInt(a: u64, b: u64, m: u64) u64 {
    return (a * b) % m;
}

fn ModAddBigInt(a: u64, b: u64, m: u64) u64 {
    return (a + b) % m;
}

fn ModSubBigInt(a: u64, b: u64, m: u64) u64 {
    return (a - b) % m;
}

fn ModExpBigInt(base: u64, exp: u64, m: u64) u64 {
    var result: u64 = 1;
    for (@range(u64, exp)) |i| {
        result = ModMulBigInt(result, base, m);
    }
    return result;
}


const x_ptr: [*]u64 = &x;  // TODO: Does this need to be const?
const y_ptr: [*]u32 = &y;  // y_ptr is pointing to y which is an u32 array of size 16 


// Bit operation tings
fn get_hi(n: u64) u64 {
    return n >> 32;
}

fn get_lo(n: u64) u64 {
    return n & 0xFFFFFFFF;
}

task ntt_8point() void {

    const pe_x = mpi_x.pe_id;
    // const pe_x = layout_module.get_x_coord();
    // const pe_x = 1;
    // @comptime_print(pe_x);

    var s73: u64; var s74: u64; var s75: u64; var s76: u64; var s77: u64; var s78: u64; var s79: u64; var s80: u64; 
    var s81: u64; var s82: u64; var s83: u64; var s84: u64; var t87: u64; var t88: u64; var t89: u64; var t90: u64; 
    var t91: u64; var t92: u64; var t93: u64; var t94: u64;

    s73 = ModMulBigInt(twd[1], x[4], modulus);
    t87 = ModAddBigInt(x[0], s73, modulus); // c = a + b % m
    t88 = ModSubBigInt(x[0], s73, modulus); // c = a - b % m
    s74 = ModMulBigInt(twd[1], x[5], modulus);
    t89 = ModAddBigInt(x[1], s74, modulus);
    t90 = ModSubBigInt(x[1], s74, modulus);
    s75 = ModMulBigInt(twd[1], x[6], modulus);
    s76 = ModMulBigInt(twd[2], ModAddBigInt(x[2], s75, modulus), modulus);
    s77 = ModMulBigInt(twd[3], ModSubBigInt(x[2], s75, modulus), modulus);
    s78 = ModMulBigInt(twd[1], x[7], modulus);
    s79 = ModMulBigInt(twd[2], ModAddBigInt(x[3], s78, modulus), modulus);
    s80 = ModMulBigInt(twd[3], ModSubBigInt(x[3], s78, modulus), modulus);

    // t91 = ModAddBigInt(t87, s76, modulus);
    t92 = ModSubBigInt(t87, s76, modulus);
    t93 = ModAddBigInt(t88, s77, modulus);
    t94 = ModSubBigInt(t88, s77, modulus);
    // s81 = ModMulBigInt(twd[4], ModAddBigInt(t89, s79, modulus), modulus);
    s82 = ModMulBigInt(twd[5], ModSubBigInt(t89, s79, modulus), modulus);
    s83 = ModMulBigInt(twd[6], ModAddBigInt(t90, s80, modulus), modulus);
    s84 = ModMulBigInt(twd[7], ModSubBigInt(t90, s80, modulus), modulus);

    // TODO: We can set up inputs to the equations (i.e. input vector and twiddle factors) in a way that allows us to get rid of the if statements
    if (pe_x == 0) {
        t91 = ModAddBigInt(t87, s76, modulus);
        s81 = ModMulBigInt(twd[4], ModAddBigInt(t89, s79, modulus), modulus);
        y64 = ModAddBigInt(t91, s81, modulus);        
    } else if (pe_x == 1) {
        t91 = ModAddBigInt(t87, s76, modulus);
        s81 = ModMulBigInt(twd[4], ModAddBigInt(t89, s79, modulus), modulus);
        y_ptr[pe_x] = ModSubBigInt(t91, s81, modulus);

    } else if (pe_x == 2) {
        y_ptr[pe_x] = ModAddBigInt(t92, s82, modulus);
    } else if (pe_x == 3) {
        y_ptr[pe_x] = ModSubBigInt(t92, s82, modulus);
    } else {
        // "Error handling" TODO: Better error handling?
        // This is definitely more computation than it's worth
        y_ptr[pe_x] = @as(u32, get_hi(@as(u64, pe_x)));
        y_ptr[pe_x+1] = @as(u32, get_hi(@as(u64, pe_x)));

        return;
    }

    y_ptr[pe_x] = @as(u32, get_hi(y64));
    y_ptr[pe_x+1] = @as(u32, get_lo(y64));

}

task f_exit() void {
    // the user must unblock cmd color for every PE
    // memcpy's cmd_stream must be unblocked on all PEs for further memcpy commands to execute
    sys_mod.unblock_cmd_stream();
}

fn main() void {
    mpi_x.init();
    // mpi_y.init();

    timestamp.enable_tsc();
    timestamp.get_timestamp(&tsc_start_buf);

    // NTT computation
    ntt_8point();

    timestamp.get_timestamp(&tsc_end_buf);
    timestamp.disable_tsc();

    var lo_: u16 = 0;
    var hi_: u16 = 0;
    var word: u32 = 0;

    lo_ = tsc_start_buf[0];
    hi_ = tsc_start_buf[1];
    timer_buf[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_start_buf[2];
    hi_ = tsc_end_buf[0];
    timer_buf[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_end_buf[1];
    hi_ = tsc_end_buf[2];
    timer_buf[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    sys_mod.unblock_cmd_stream();
    // @activate(EXIT);
}


comptime {
    // @bind_local_task(f_exit, EXIT);

    // Export symbol pointing to y so it is host-readable
    @export_symbol(y_ptr, "y");
    // @export_symbol(x_ptr, "x"); 


    // Export host-callable device function / // Export function so it is host-callable by RPC mechanism
    // TODO: Find out why we need to do these exports here and in the layout file
    @export_symbol(main);

    @rpc(@get_data_task_id(LAUNCH));
    //@rpc(sys_mod.LAUNCH);
}