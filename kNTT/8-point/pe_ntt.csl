const layout_module = @import_module("<layout>");

const timestamp = @import_module("<time>");
var tsc_end_buf = @zeros([timestamp.tsc_size_words]u16);
var tsc_start_buf = @zeros([timestamp.tsc_size_words]u16);

var timer_buf = @zeros([3]f32);
var ptr_timer_buf: [*]f32 = &timer_buf;


param memcpy_params: comptime_struct;
param c2d_params: comptime_struct;


// Pick two task IDs not used in the library for callbacks
const x_task_id = @get_local_task_id(15);
const y_task_id = @get_local_task_id(16);

param LAUNCH: color;  // a routable color for RPC
// Task IDs
// param EXIT:                     local_task_id; // entrypoint to leave RPC

const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// <https://sdk.cerebras.net/csl/code-examples/benchmark-gemv-collectives>
// Currently only using collectives to get pe_id
const mpi_x = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.x });
// const mpi_y = @import_module("<collectives_2d/pe>", .{ .dim_params = c2d_params.y });

var y: [8]u32;
var y64: u32;
// TODO [poku]: Hardcoding some values for now
var x = [8]u32 {4, 10, 1, 15, 15, 9, 6, 8};

var twd = [8]u32 {1, 106416730, 210605896, 90281519, 18125476, 56427457, 86117821, 123453994};

const modulus: u32 = 17;
const omegaN: u32 = 9;
const m: u32 = 2;  // m==multiple; not to be confused with the m in the modular functions which actually refers to the modulus, p
const N: u32 = 8;


fn modMul(a: u32, b: u32, m: u32) u32 {
    return (a * b) % m;
}

fn modAdd(a: u32, b: u32, m: u32) u32 {
    return (a + b) % m;
}

fn modSub(a: u32, b: u32, m: u32) u32 {
    return (a - b) % m;
}

// 
fn modExp(base: u32, exp: u32, m: u32) u32 {
    if (m == 1) {
        return 0;
    }
    var result: u32 = 1;
    var _base: u32 = base;
    var _exp: u32 = exp;
    _base = _base % m;
    while (_exp > 0) {
        if (_exp % 2 == 1) {
            result = (result * _base) % m;
        }
        _exp = _exp >> 1;
        _base = (_base * _base) % m;
    }
    
    return result;
}

// Implemented my own exponentiation because the CSL math library's pow function is only for floating point
// TODO: It might be more efficient to use their implementation and just bitcast? Though this might be a useful approach 
//       for BigIntegers if wee ever get there
fn oldmodExp(base: u32, exp: u32, m: u32) u32 {
    var result: u32 = 1;
    for (@range(u32, exp)) |i| {
        result = modMul(result, base, m);
    }
    return result;
}


const x_ptr: [*]u32 = &x;  // TODO: Does this need to be const?
const y_ptr: [*]u32 = &y;  // y_ptr is pointing to y which is an u32 array of size 8 


// Bit operation tings
fn get_hi(n: u32) u32 {
    return n >> 32;
}

fn get_lo(n: u32) u32 {
    return n & 0xFFFFFFFF;
}

task ntt_8point() void {

    const pe_x = mpi_x.pe_id;
    // const pe_x = layout_module.get_x_coord();
    // const pe_x = 1;
    // @comptime_print(pe_x);

    var t: u32;  // Twiddle factors;
    y[pe_x] = 0;
    for (@range(u32, N)) |j| {
        t = modExp(omegaN, j * @as(u32, pe_x), modulus);
        y[pe_x] =  modAdd(y[pe_x], modMul(x[j], t, modulus), modulus);
    }
}

task f_exit() void {
    // the user must unblock cmd color for every PE
    // memcpy's cmd_stream must be unblocked on all PEs for further memcpy commands to execute
    sys_mod.unblock_cmd_stream();
}

fn main() void {
    mpi_x.init();
    // mpi_y.init();

    timestamp.enable_tsc();
    timestamp.get_timestamp(&tsc_start_buf);

    // NTT computation
    ntt_8point();

    timestamp.get_timestamp(&tsc_end_buf);
    timestamp.disable_tsc();

    var lo_: u16 = 0;
    var hi_: u16 = 0;
    var word: u32 = 0;

    lo_ = tsc_start_buf[0];
    hi_ = tsc_start_buf[1];
    timer_buf[0] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_start_buf[2];
    hi_ = tsc_end_buf[0];
    timer_buf[1] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    lo_ = tsc_end_buf[1];
    hi_ = tsc_end_buf[2];
    timer_buf[2] = @bitcast(f32, (@as(u32,hi_) << @as(u16,16)) | @as(u32, lo_) );

    sys_mod.unblock_cmd_stream();
    // @activate(EXIT);
}


comptime {
    // @bind_local_task(f_exit, EXIT);

    // Export symbol pointing to y so it is host-readable
    @export_symbol(y_ptr, "y");
    // @export_symbol(x_ptr, "x"); 


    // Export host-callable device function / // Export function so it is host-callable by RPC mechanism
    // TODO: Find out why we need to do these exports here and in the layout file
    @export_symbol(main);

    @rpc(@get_data_task_id(LAUNCH));
    //@rpc(sys_mod.LAUNCH);
}